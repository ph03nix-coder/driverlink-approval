name: Flutter Android Builds

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

permissions:
  contents: write

env:
  FLUTTER_HOME: /opt/flutter

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter (latest stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      # âš¡ Cache Flutter, Gradle and Pub dependencies
      - name: Cache Flutter, Gradle and Pub
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.FLUTTER_HOME }}
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}

      - name: Install dependencies
        run: flutter pub get

      - name: Precache Flutter
        run: flutter precache --android

      # ğŸ§© Extract version from pubspec.yaml
      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}' | tr -d '\r')
          VERSION_TAG="v${VERSION}"

          # If tag exists, append run number to keep it unique
          if git fetch --tags && git tag | grep -q "$VERSION_TAG"; then
            VERSION_TAG="${VERSION_TAG}-${GITHUB_RUN_NUMBER}"
            echo "Tag already exists, using $VERSION_TAG"
          fi

          # Add branch suffix (optional for clarity)
          if [ "$GITHUB_REF_NAME" = "dev" ]; then
            VERSION_TAG="${VERSION_TAG}-dev"
          fi

          echo "Final version tag: $VERSION_TAG"
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT

      # ğŸ”¹ Build debug when push to dev
      - name: Build Debug APK
        if: github.ref == 'refs/heads/dev'
        run: flutter build apk --debug

      # ğŸ”¹ Build release when push to main
      - name: Build Release APK
        if: github.ref == 'refs/heads/main'
        run: flutter build apk --release

      # ğŸ§¾ List artifacts for debugging
      - name: List generated APKs
        run: ls -R build/app/outputs/flutter-apk

      # ğŸ”¹ Upload artifacts
      - name: Upload APKs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ github.ref_name }}
          path: build/app/outputs/flutter-apk/*.apk

      # ğŸ”¹ Create GitHub Release (for both main & dev)
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_version.outputs.version_tag }}
          name: Release ${{ steps.get_version.outputs.version_tag }}
          body: |
            ğŸš€ Automatic release build from **${{ github.ref_name }}** branch.
            ğŸ“¦ Version: ${{ steps.get_version.outputs.version_tag }}
          artifacts: |
            build/app/outputs/flutter-apk/*.apk
          token: ${{ secrets.GITHUB_TOKEN }}
